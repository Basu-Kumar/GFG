Given a singly linked list of N nodes.
The task is to find the middle of the linked list. For example, if the linked list is
1-> 2->3->4->5, then the middle node of the list is 3.
If there are two middle nodes(in case, when N is even), print the second middle element.
For example, if the linked list given is 1->2->3->4->5->6, then the middle node of the list is 4.

class Solution{
    public:
    /* Should return data of middle node. If linked list is empty, then  -1*/
    int getMiddle(Node *head)
    {
        // Your code here
        if(head==NULL){
            return 0;
        }
        if(head->next==NULL){
            return head->data;
        }
        if(head->next->next==NULL){
            return head->next->data;
        }
        
        Node *temp1=head;
        Node *temp2=head->next;
        while(temp2!=NULL){
            temp2=temp2->next;
            temp1=temp1->next;
            if(temp2!=NULL){
                temp2=temp2->next;
                
            }
        }
        return temp1->data;
    }
};